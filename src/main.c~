// ------NOTE: MANAGE THE HEAP MEMORY IN OBJECTS.C FOR GENERATING OPJECTS
#include "context.h"
#include "shader.h"

char* vecSrc="../src/defaultVertexShader.glsl";
char* fragSrc="../src/defaultFragShader.glsl";

int
main(int argc, char **argv){
  // Setup context
  if(!initContext()) return -1;  
  
  // ---------SHADER------------
  char *verSrc  = "../src/defaultVertexShader.glsl";
  char *fragSrc = "../src/defaultFragShader.glsl";
  struct ShaderProgram shaderProg;
  generateShaderProgramVF(&shaderProg, verSrc, fragSrc);
  
  // -- generate the quad
  float vertices[] = {
		      0.5f,  0.5f, 0.0f, 
		      0.5f, -0.5f, 0.0f, 
		      -0.5f, -0.5f, 0.0f,
		      -0.5f,  0.5f, 0.0f  
  };
  unsigned int indices[] = {  
			    0, 1, 3,
			    1, 2, 3 
  };
  unsigned int VBO, VAO, EBO;
  glGenVertexArrays(1, &VAO);
  glGenBuffers(1, &VBO);
  glGenBuffers(1, &EBO);

  glBindVertexArray(VAO);

  glBindBuffer(GL_ARRAY_BUFFER, VBO);
  glBufferData(GL_ARRAY_BUFFER, sizeof(vertices), vertices, GL_STATIC_DRAW);

  glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, EBO);
  glBufferData(GL_ELEMENT_ARRAY_BUFFER, sizeof(indices), indices, GL_STATIC_DRAW);

  glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), (void*)0);
  glEnableVertexAttribArray(0);

  // texture
  unsigned int tex;
  glGenTextures(1, &tex);
  glBindTexture(GL_TEXTURE_1D, tex);
  glTexParameteri(GL_TEXTURE_1D, GL_TEXTURE_MIN_FILTER, GL_NEAREST);
  glTexParameteri(GL_TEXTURE_1D, GL_TEXTURE_MAG_FILTER, GL_NEAREST);
  
  
  while(!contextShouldClose()){
    clearContext();

    useShaderProgram(&shaderProg);
    glBindVertexArray(VAO);
    glActiveTexture(GL_TEXTURE0);
    glBindTexture(GL_TEXTURE_1D, tex);
    glDrawElements(GL_TRIANGLES, 6, GL_UNSIGNED_INT, 0);

 
    
    updateContext();
  }

  
  // free data
  glDeleteVertexArrays(1, &VAO);
  glDeleteBuffers(1, &VBO);
  glDeleteBuffers(1, &EBO);
  cleanContext();
  return 0;
}
